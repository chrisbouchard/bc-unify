**********************************************************************
*** tools.maude
***
*** Copyright (c) 2013, Christopher Bouchard
*** All rights reserved.
***
*** Redistribution and use in source and binary forms, with or without
*** modification, are permitted provided that the following conditions
*** are met:
***
***  * Redistributions of source code must retain the above copyright
***    notice, this list of conditions and the following disclaimer.
***
***  * Redistributions in binary form must reproduce the above copyright
***    notice, this list of conditions and the following disclaimer in
***    the documentation and/or other materials provided with the
***    distribution.
***
*** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*** FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*** COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*** BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*** ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*** POSSIBILITY OF SUCH DAMAGE.
***
**********************************************************************

fmod TOOLS is
    pr CONVERSION .
    pr META-LEVEL .
    pr STRING .

    vars N : Nat .
    vars Y : Type .
    vars U V W : Variable .
    vars K : Constant .
    vars Q : Qid .
    vars L L' : TermList .
    vars NL : NeTermList .
    vars T T' TL TR : Term .
    vars S : UnificationProblem .
    vars STR PREFIX SUFFIX : String .

    *** Create a new variable of the given type
    op newVar* : Nat Type -> Variable .
    eq newVar*(N, Y) = qid("#" + string(N, 10) + ":" + string(Y)) .

    op isNewVar : Qid -> Bool .
    ceq isNewVar(Q) = true
        if Q :: Variable /\ STR := string(getName(Q))
        /\ PREFIX := substr(STR, 0, 1)
        /\ SUFFIX := substr(STR, 1, length(STR))
        /\ PREFIX == "#" /\ rat(SUFFIX, 10) :: Nat .
    eq isNewVar(Q) = false [owise] .

    *** Check whether the variable appears in the term
    op occurs : Variable TermList -> Bool .
    eq occurs(U, U) = true .
    eq occurs(U, Q[L]) = occurs(U, L) .
    eq occurs(U, (T, NL)) = occurs(U, T) or occurs(U, NL) .
    eq occurs(U, L) = false [owise] .

    *** Check whether the variable appears in any equation
    op occurs : Variable UnificationProblem -> Bool .
    eq occurs(U, TL =? TR /\ S) =
        occurs(U, TL) or occurs(U, TR) or occurs(U, S) .
    eq occurs(U, TL =? TR) = occurs(U, TL) or occurs(U, TR) .

    *** Replace all occurences of the variable in the given term
    op replace : Variable Term TermList -> TermList .
    eq replace(U, T, U) = T .
    eq replace(U, T, Q[L]) = Q[replace(U, T, L)] .
    eq replace(U, T, (T', NL)) = replace(U, T, T'), replace(U, T, NL) .
    eq replace(U, L, L') = L' [owise] .

    *** Replace all occurences of the variable in all equations
    op replace : Variable Term UnificationProblem -> UnificationProblem .
    op replace : Variable Term UnificandPair -> UnificandPair .
    eq replace(U, T, TL =? TR /\ S)
        = replace(U, T, TL) =? replace(U, T, TR) /\ replace(U, T, S) .
    eq replace(U, T, TL =? TR) = replace(U, T, TL) =? replace(U, T, TR) .

    *** Get the root symbol of a term
    op root : Term -> Qid .
    eq root(K) = K .
    eq root(V) = V .
    eq root(Q[L]) = Q .
endfm

fmod NAT-UTILS is
    protecting NAT .

    var N : Nat .

    op dec : Nat -> Nat .
    eq dec(s N) = N .
    eq dec(0) = 0 .
endfm

fmod STRING-UTILS is
    protecting STRING .
    protecting LIST{String} * (sort NeList{String} to NeStringList,
                               sort List{String} to StringList) .

    vars STR SEP PREFIX SUFFIX : String .

    *** Split a string based on a separator string.
    op splitString : String String -> StringList .
    ceq splitString(STR, SEP) =
        splitString(PREFIX, SEP) splitString(SUFFIX, SEP)
        if PREFIX := substr(STR, 0, find(STR, SEP, 0))
        /\ SUFFIX := substr(STR, find(STR, SEP, 0) + length(SEP),
                            length(STR)) .
    ceq splitString(STR, SEP) =
        (if length(STR) > 0 then STR else nil fi)
        if notFound == find(STR, SEP, 0) .
endfm

fmod UNIFICATION-PAIR-UTILS is
    protecting META-LEVEL .

    vars SUB : Substitution .
    vars N : Nat .

    op getSubstitution : UnificationPair -> Substitution .
    eq getSubstitution({SUB, N}) = SUB .

    op getNat : UnificationPair -> Nat .
    eq getNat({SUB, N}) = N .
endfm

