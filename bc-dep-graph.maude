********************************************************************************
*** cbc-dep-graph.maude by Chris Bouchard
***
*** TODO: We probably shouldn't recreate the dependency graphs each time we
*** want to test occur check. It might be better to turn each rewrite rule on
*** equations into a rewrite on the graph.
********************************************************************************

load graph
load symbol-map

fmod DEP-EDGE is
    pr META-TERM .

    sort DepEdge DepNode DepPair .

    op v : Variable -> DepNode [ctor] .

    op __ : DepNode DepNode -> DepPair [ctor comm] .
    op e : DepNode DepNode Qid -> DepEdge [ctor] .

    vars E : DepEdge .
    vars L : Qid .
    vars U V W : DepNode .
    vars X Y : Variable .

    op from : DepEdge DepNode -> Bool .
    eq from(e(U, V, L), W) = U == W .

    op to : DepEdge DepNode -> Bool .
    eq to(e(U, V, L), W) = V == W .

    op nodes : DepEdge -> DepPair .
    eq nodes(e(U, V, L)) = U V .

    op is-cons : DepEdge -> Bool .
    eq is-cons(e(U, V, L)) = L == 'cons .

    op is-h : DepEdge -> Bool .
    eq is-h(e(U, V, L)) = L == 'lh or L == 'rh .

    op is-lg : DepEdge -> Bool .
    eq is-lg(e(U, V, L)) = L == 'lg .
endfm

view DepEdge from EDGE to DEP-EDGE is
    sort Edge to DepEdge .
    sort Node to DepNode .
    sort NodePair to DepPair .
endv

fmod DEP-GRAPH is
    pr META-GRAPH{DepEdge} * (sort Graph{DepEdge} to DepGraph,
                              sort NeGraph{DepEdge} to NeDepGraph,
                              sort NodeSet{DepEdge} to DepNodeSet,
                              sort NeNodeSet{DepEdge} to NeDepNodeSet) .
    pr META-LEVEL .
    pr SYMBOL-MAP .

    vars GR : DepGraph .
    vars S : UnificationProblem .
    vars U : DepNode .
    vars X Y Z : Variable .
    vars NS : DepNodeSet .
    vars SYM : SymbolMap .

    vars CONS CBC H G : Qid .
    vars NIL : Constant .

    *** Take a list unification problem S and compute the dependency
    *** graph G_l(S)
    op build-list-depgraph : Qid Qid Qid Qid Constant UnificationProblem
        -> DepGraph .
    eq build-list-depgraph(CONS, CBC, H, G, NIL, (X =? CONS[Y, Z] /\ S))
        = e(v(X), v(Z), 'cons) || build-list-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-list-depgraph(CONS, CBC, H, G, NIL, X =? CBC[Y, Z] /\ S)
        = e(v(X), v(Y), 'cbc) || e(v(Y), v(X), 'cbc)
        || build-list-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-list-depgraph(CONS, CBC, H, G, NIL, S) = emptygraph [owise] .

    *** Take an element unification problem S and compute the dependency
    *** graph G_e(S)
    op build-elt-depgraph : Qid Qid Qid Qid Constant UnificationProblem
        -> DepGraph .
    eq build-elt-depgraph(CONS, CBC, H, G, NIL, (X =? H[Y, Z] /\ S))
        = e(v(X), v(Y), 'lh) || e(v(X), v(Z), 'rh)
        || build-elt-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-elt-depgraph(CONS, CBC, H, G, NIL, (X =? G[Y, Z] /\ S))
        = e(v(X), v(Y), 'lg) || e(v(X), v(Z), 'rg)
        || build-elt-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-elt-depgraph(CONS, CBC, H, G, NIL, S) = emptygraph [owise] .

    *** Return true if the given list unification problem violates the occur
    *** check condition
    op violates-list-oc : Qid Qid Qid Qid Constant UnificationProblem -> Bool .
    eq violates-list-oc(CONS, CBC, H, G, NIL, S)
        = violates-list-oc(build-list-depgraph(CONS, CBC, H, G, NIL, S)) .

    *** Return true if the given list dependency graph violates the occur
    *** check condition
    op violates-list-oc : DepGraph -> Bool .
    eq violates-list-oc(GR) = $violates-list-oc(graphnodes(GR), GR) .

    *** Helper operator for violates-list-oc
    op $violates-list-oc : DepNodeSet DepGraph -> Bool .
    eq $violates-list-oc((U, NS), GR)
        = meta-ne-path(upModule('DEP-EDGE, false),
                       'is-cons, U, U, GR, 'any) =/= nopath
        or $violates-list-oc(NS, GR) .
    eq $violates-list-oc(emptyset, GR) = false .

    *** Return true if the given element unification problem violates the occur
    *** check condition
    op violates-elt-oc : Qid Qid Qid Qid Constant UnificationProblem -> Bool .
    eq violates-elt-oc(CONS, CBC, H, G, NIL, S)
        = violates-elt-oc(build-elt-depgraph(CONS, CBC, H, G, NIL, S)) .

    *** Return true if the given element dependency graph violates the occur
    *** check condition
    op violates-elt-oc : DepGraph -> Bool .
    eq violates-elt-oc(GR) = $violates-elt-oc(graphnodes(GR), GR) .

    *** Helper operator for violates-elt-oc
    op $violates-elt-oc : DepNodeSet DepGraph -> Bool .
    eq $violates-elt-oc((U, NS), GR)
        = meta-ne-path(upModule('DEP-EDGE, false),
                       'is-h, U, U, GR, 'each) =/= nopath
        or meta-ne-path(upModule('DEP-EDGE, false),
                        'is-lg, U, U, GR, 'each) =/= nopath
        or $violates-elt-oc(NS, GR) .
    eq $violates-elt-oc(emptyset, GR) = false .
endfm

