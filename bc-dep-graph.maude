********************************************************************************
*** bc-dep-graph.maude by Chris Bouchard
***
*** TODO: We probably shouldn't recreate the dependency graphs each time we
*** want to test occur check. It might be better to turn each rewrite rule on
*** equations into a rewrite on the graph.
********************************************************************************

load graph
load symbol-map

fmod BC-DEP-EDGE is
    pr META-TERM .

    sort BCDepEdge BCDepNode BCDepPair .

    op v : Variable -> BCDepNode [ctor] .

    op __ : BCDepNode BCDepNode -> BCDepPair [ctor comm] .

    op e : BCDepNode BCDepNode Qid -> BCDepEdge [ctor] .

    vars E : BCDepEdge .
    vars L : Qid .
    vars U V W : BCDepNode .
    vars X Y : Variable .

    op from : BCDepEdge BCDepNode -> Bool .
    eq from(e(U, V, L), W) = U == W .

    op to : BCDepEdge BCDepNode -> Bool .
    eq to(e(U, V, L), W) = V == W .

    op nodes : BCDepEdge -> BCDepPair .
    eq nodes(e(U, V, L)) = U V .

    op is-cons : BCDepEdge -> Bool .
    eq is-cons(e(U, V, L)) = L == 'cons .

    op is-cons : BCDepEdge -> Bool .
    eq is-cons(e(U, V, L)) = L == 'cons .
endfm

view BCDepEdge from EDGE to BC-DEP-EDGE is
    sort Edge to BCDepEdge .
    sort Node to BCDepNode .
    sort NodePair to BCDepPair .
endv

fmod DEP-GRAPH is
    pr META-GRAPH{BCDepEdge} * (sort Graph{BCDepEdge} to BCDepGraph,
                                sort NeGraph{BCDepEdge} to NeBCDepGraph,
                                sort NodeSet{BCDepEdge} to BCDepNodeSet,
                                sort NeNodeSet{BCDepEdge} to NeBCDepNodeSet) .
    pr META-LEVEL .
    pr SYMBOL-MAP .

    vars GR : BCDepGraph .
    vars S : UnificationProblem .
    vars U : BCDepNode .
    vars X Y Z : Variable .
    vars NS : BCDepNodeSet .
    vars SYM : SymbolMap .

    vars CONS CBC H G : Qid .
    vars NIL : Constant .

    *** Take a list unification problem S and compute the dependency
    *** graph G_l(S)
    op build-list-depgraph : Qid Qid Qid Qid Constant UnificationProblem
        -> BCDepGraph .
    eq build-list-depgraph(CONS, CBC, H, G, NIL, (X =? CONS[Y, Z] /\ S))
        = e(v(X), v(Z), 'cons) || build-list-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-list-depgraph(CONS, CBC, H, G, NIL, X =? CBC[Y, Z] /\ S)
        = e(v(X), v(Y), 'cbc) || e(v(Y), v(X), 'cbc)
        || build-list-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-list-depgraph(CONS, CBC, H, G, NIL, S) = emptygraph [owise] .

    *** Take an element unification problem S and compute the dependency
    *** graph G_e(S)
    op build-elt-depgraph : Qid Qid Qid Qid Constant UnificationProblem
        -> BCDepGraph .
    eq build-elt-depgraph(CONS, CBC, H, G, NIL, (X =? H[Y, Z] /\ S))
        = e(v(X), v(Y), 'lh) || e(v(X), v(Z), 'rh)
        || build-elt-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-elt-depgraph(CONS, CBC, H, G, NIL, (X =? G[Y, Z] /\ S))
        = e(v(X), v(Y), 'lg) || e(v(X), v(Z), 'rg)
        || build-elt-depgraph(CONS, CBC, H, G, NIL, S) .
    eq build-elt-depgraph(CONS, CBC, H, G, NIL, S) = emptygraph [owise] .

    *** Return true if the given list unification problem violates the occur
    *** check condition
    op violates-list-oc : Qid Qid Qid Qid Constant UnificationProblem -> Bool .
    eq violates-list-oc(CONS, CBC, H, G, NIL, S)
        = violates-list-oc(build-list-depgraph(CONS, CBC, H, G, NIL, S)) .

    *** Return true if the given list dependency graph violates the occur
    *** check condition
    op violates-list-oc : BCDepGraph -> Bool .
    eq violates-list-oc(GR) = $violates-list-oc(graphnodes(GR), GR) .

    *** Helper operator for violates-list-oc
    op $violates-list-oc : BCDepNodeSet BCDepGraph -> Bool .
    eq $violates-list-oc((U, NS), GR)
        = meta-ne-path(upModule('DEP-EDGE, false),
                       'is-cons, U, U, GR, 'any) =/= nopath
        or $violates-list-oc(NS, GR) .
    eq $violates-list-oc(emptyset, GR) = false .

    *** Return true if the given element unification problem violates the occur
    *** check condition
    op violates-elt-oc : Qid Qid Qid Qid Constant UnificationProblem -> Bool .
    eq violates-elt-oc(CONS, CBC, H, G, NIL, S)
        = violates-elt-oc(build-elt-depgraph(CONS, CBC, H, G, NIL, S)) .

    *** Return true if the given element dependency graph violates the occur
    *** check condition
    op violates-elt-oc : BCDepGraph -> Bool .
    eq violates-elt-oc(GR) = $violates-elt-oc(graphnodes(GR), GR) .

    *** Helper operator for violates-elt-oc
    op $violates-elt-oc : BCDepNodeSet BCDepGraph -> Bool .
    eq $violates-elt-oc((U, NS), GR)
        = meta-ne-path(upModule('DEP-EDGE, false),
                       'is-h, U, U, GR, 'each) =/= nopath
        or meta-ne-path(upModule('DEP-EDGE, false),
                        'is-lg, U, U, GR, 'each) =/= nopath
        or $violates-elt-oc(NS, GR) .
    eq $violates-elt-oc(emptyset, GR) = false .
endfm

