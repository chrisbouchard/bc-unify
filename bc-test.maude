**********************************************************************
*** bc-test.maude
***
*** Copyright (c) 2013, Christopher Bouchard
*** All rights reserved.
***
*** Redistribution and use in source and binary forms, with or without
*** modification, are permitted provided that the following conditions
*** are met:
***
***  * Redistributions of source code must retain the above copyright
***    notice, this list of conditions and the following disclaimer.
***
***  * Redistributions in binary form must reproduce the above copyright
***    notice, this list of conditions and the following disclaimer in
***    the documentation and/or other materials provided with the
***    distribution.
***
*** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*** FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*** COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*** BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*** ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*** POSSIBILITY OF SUCH DAMAGE.
***
**********************************************************************

load bc-unification .

fmod TEST-BC-UNIFICATION is
    protecting BC-UNIFICATION{MetaUnifyAlg} .
    protecting NAT .

    vars N : Nat .

    op view : -> View .
    eq view = upView('BcSignature) .

    op test-var-elim : -> UnificationPair? .
    eq test-var-elim =
        bc-unify('U:List =? 'V:List /\
                 'X:List =? 'cons['Y:Elt, 'U:List] /\
                 'Z:List =? 'bc['U:List, 'Y:Elt],
                 view, 0, 0) .

    op test-cancel-cons : -> UnificationPair? .
    eq test-cancel-cons =
        bc-unify('U:List =? 'cons['V:Elt, 'W:List] /\
                 'U:List =? 'cons['X:Elt, 'Y:List],
                 view, 0, 0) .

    op test-nil-soln-1 : -> UnificationPair? .
    eq test-nil-soln-1 =
        bc-unify('U:List =? 'bc['V:List, 'W:List] /\
                 'U:List =? 'nil.List,
                 view, 0, 0) .

    op test-nil-soln-2 : -> UnificationPair? .
    eq test-nil-soln-2 =
        bc-unify('U:List =? 'bc['V:List, 'W:Elt] /\
                 'V:List =? 'nil.List,
                 view, 0, 0) .

    op test-nil-cycle : -> UnificationPair? .
    eq test-nil-cycle =
        bc-unify('U:List =? 'bc['V:List, 'W:Elt] /\
                 'V:List =? 'bc['X:List, 'Y:Elt] /\
                 'X:List =? 'bc['U:List, 'Z:Elt],
                 view, 0, 0) .

    op test-semi-cancel-bc : -> UnificationPair? .
    eq test-semi-cancel-bc =
        bc-unify('U:List =? 'bc['V:List, 'W:Elt] /\
                 'U:List =? 'bc['X:List, 'W:Elt],
                 view, 0, 0) .

    op test-push-below : -> UnificationPair? .
    eq test-push-below =
        bc-unify('U:List =? 'bc['V:List, 'W:Elt] /\
                 'U:List =? 'bc['X:List, 'Y:Elt] /\
                 'U:List =? 'cons['U1:Elt, 'U2:List],
                 view, 0, 0) .

    op test-splitting : -> UnificationPair? .
    eq test-splitting =
        bc-unify('U:List =? 'cons['V:Elt, 'W:List] /\
                 'U:List =? 'bc['X:List, 'Y:Elt],
                 view, 0, 0) .

    op test-size-failure : -> UnificationPair? .
    eq test-size-failure =
        bc-unify('U:List =? 'cons['V:Elt, 'W:List] /\
                 'U:List =? 'nil.List,
                 view, 0, 0) .

    op test-cycle-failure : -> UnificationPair? .
    eq test-cycle-failure =
        bc-unify('U:List =? 'bc['V:List, 'W:Elt] /\
                 'U:List =? 'bc['X:List, 'Y:Elt] /\
                 'V:List =? 'cons['Z:Elt, 'X:List],
                 view, 0, 0) .

    op test-nondet_ : Nat -> UnificationPair? .
    eq test-nondet N =
        bc-unify('U:List =? 'bc['V:List, 'W:Elt] /\
                 'U:List =? 'bc['X:List, 'Y:Elt],
                 view, 0, N) .
endfm

