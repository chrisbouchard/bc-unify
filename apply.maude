fmod GCONTEXT is
    protecting META-TERM .

    sorts GContext NeGTermList .
    subsorts Term Context < GContext .
    subsorts NeTermList NeCTermList < NeGTermList < GTermList .

    op _[_] : Qid GTermList -> GContext [ctor ditto] .

    op _,_ : GTermList NeGTermList -> NeGTermList [ctor ditto] .
    op _,_ : NeGTermList GTermList -> NeGTermList [ctor ditto] .
endfm

fmod APPLY is
    protecting GCONTEXT .
    protecting META-TERM .
    protecting NAT .

    vars C C' : Context .
    vars CTL : NeCTermList .
    vars GTL GTL' GTL'' GTL''' : GTermList .
    vars NeGTL : NeGTermList .
    vars T T' : Term .
    vars GC : GContext .
    vars TL : TermList .
    vars F : Qid .
    vars SUB : Substitution .
    vars A : Constant .
    vars V : Variable .
    vars N : Nat .

    op _[_] : GContext GTermList -> [GContext] .
    op _[_] : Context Term -> Term .
    op _[_] : Context Context -> Context .

    eq [][GC] = GC .
    ceq F[GTL][GTL'] = F[applyContext(GTL, GTL')]
        if contextCount(GTL) = listSize(GTL') .

    op applyContext : NeCTermList Term -> TermList .
    op applyContext : NeCTermList Context -> NeCTermList .
    op applyContext : GTermList GTermList -> [GTermList] .

    eq applyContext((T, GTL), GTL') = T, applyContext(GTL, GTL') .
    ceq applyContext((GC, GTL), GTL') = GC[GTL''], applyContext(GTL, GTL''')
        if not (GC :: Term) /\ N := contextCount(GC)
        /\ GTL'' := take(GTL', N) /\ GTL''' := skip(GTL', N) .
    eq applyContext(empty, empty) = empty .

    op contextCount : GTermList -> Nat .
    eq contextCount([]) = 1 .
    eq contextCount(V) = 0 .
    eq contextCount(A) = 0 .
    eq contextCount(F[GTL]) = contextCount(GTL) .
    eq contextCount((GC, NeGTL)) = contextCount(GC) + contextCount(NeGTL) .
    eq contextCount(empty) = 0 .

    op take : GTermList Nat -> GTermList .
    eq take((T, GTL), s N) = T, take(GTL, N) .
    eq take(GTL, 0) = empty .

    op skip : GTermList Nat -> GTermList .
    eq skip((T, GTL), s N) = skip(GTL, N) .
    eq skip(GTL, 0) = GTL .

    op listSize : GTermList -> Nat .
    eq listSize((T, GTL)) = 1 + listSize(GTL) .
    eq listSize(empty) = 0 .


    op _[_] : Substitution Term -> Term .
    op _[_] : Substitution Context -> Context .
    op _[_] : Substitution GContext -> GContext .

    eq SUB[A] = A .
    eq SUB[[]] = [] .

    eq (V <- T ; SUB)[V] = T .
    eq SUB[V] = V [owise] .

    eq SUB[F[GTL]] = F[applySubst(SUB, GTL)] .

    op applySubst : Substitution GTermList -> GTermList .
    eq applySubst(SUB, (GC, GTL)) = SUB[GC], applySubst(SUB, GTL) .
    eq applySubst(SUB, empty) = empty .
endfm

