********************************************************************************
*** unification.maude by Chris Bouchard
***
*** 2013-08-22: Renamed unify_ to st-unify and switched to using UnificandSet
***             internally. Switched to using UnificationProblem externally.
*** 2010-06-01: Fixed bug in unify_
*** 2010-06-06: Added better formatting and color support
***
********************************************************************************

load tools .
load unificand-set .
load unification-algorithm .

fmod UNIFICATION is
    protecting META-LEVEL .
    protecting NAT .
    protecting TOOLS .
    protecting UNIFICAND-SET .
    protecting STANDARD-FORM .

    vars A B : Constant .
    vars E : UnificandPair .
    vars F G : Qid .
    vars L M : TermList .
    vars PROB : UnificationProblem .
    vars T U V : Term .
    vars X Y : Variable .
    vars S : UnificandSet .
    vars N : Nat .

    *** Attempt to find the most general unifier for a set of equations
    op st-unify : UnificationProblem Nat -> UnificationPair? .
    eq st-unify(PROB, N) = $st-unify(problemToSet(PROB), N) .

    op $st-unify : UnificandSet Nat -> UnificationPair? .
    eq $st-unify(E & E & S, N) = $st-unify(E & S, N) .
    eq $st-unify(T =? T & S, N) = $st-unify(S, N) .
    eq $st-unify(F[L] =? F[M] & S, N) = $st-unify(break(L, M) & S, N) .
    ceq $st-unify(A =? B & S, N) = noUnifier if A =/= B .
    ceq $st-unify(F[L] =? G[M] & S, N) = noUnifier if F =/= G .
    ceq $st-unify(X =? T & S, N) = noUnifier if occurs(X, T) .
    ceq $st-unify(T =? X & S, N) = $st-unify(X =? T & S, N) if not (T :: Variable) .
    ceq $st-unify(X =? T & S, N) = $st-unify(X =? T & replace(X, T, S), N)
        if not occurs(X, T) /\ occurs(X, S) .
    eq $st-unify(S, N) = {buildsub(S), N} [owise] .

    *** Match pairs of terms in two term lists to make a set of equations
    op break : TermList TermList -> UnificandSet .
    eq break((T, L), (U, M)) = T =? U & break(L, M) .
    eq break(empty, empty) = empty .
endfm

*** A module to make st-unify look like metaUnify. It just ignores some of the
*** paremeters.
fmod UNIFICATION-ADAPTER is
    protecting UNIFICATION .

    vars MOD : Module .
    vars PROB : UnificationProblem .
    vars N1 N2 : Nat .

    op st-unify : Module UnificationProblem Nat Nat -> UnificationPair? .
    eq st-unify(MOD, PROB, N1, N2) = st-unify(PROB, N1) .
endfm

view StandardUnification from UNIFICATION-ALGORITHM to UNIFICATION-ADAPTER is
    op unify-alg to st-unify .
endv

