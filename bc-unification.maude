**********************************************************************
*** bc-unification.maude
***
*** Copyright (c) 2013, Christopher Bouchard
*** All rights reserved.
***
*** Redistribution and use in source and binary forms, with or without
*** modification, are permitted provided that the following conditions
*** are met:
***
***  * Redistributions of source code must retain the above copyright
***    notice, this list of conditions and the following disclaimer.
***
***  * Redistributions in binary form must reproduce the above copyright
***    notice, this list of conditions and the following disclaimer in
***    the documentation and/or other materials provided with the
***    distribution.
***
*** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*** FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*** COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*** BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*** ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*** POSSIBILITY OF SUCH DAMAGE.
***
**********************************************************************

load apply .
load graph .
load inference .
load unificand-set .
load unification-algorithm .

fth BC is
    --- The sorts for element and list are assumed to be completely
    --- disjoint.
    sorts Elt List .

    op cons : Elt List -> List [ctor] .
    op nil : -> List [ctor] .
    op bc : List Elt -> List .
    op h : Elt Elt -> Elt .

    vars X Z : Elt .
    vars Y : List .

    --- The axioms of BC. They form a canonical rewrite system.
    eq bc(nil, Z) = nil [nonexec] .
    eq bc(cons(X, Y), Z) = cons(h(X, Z), bc(Y, h(X, Z))) [nonexec] .
endfth

fmod BC-SIGNATURE is
    sorts Elt List .

    op cons : Elt List -> List [ctor] .
    op nil : -> List [ctor] .
    op bc : List Elt -> List [ctor] .
    op h : Elt Elt -> Elt [ctor] .
endfm

view BcSignature from BC to BC-SIGNATURE is
endv

fmod BC-SHARED is
    protecting META-TERM .
    protecting TOOLS .
    protecting UNIFICAND-SET .
    protecting STANDARD-FORM .

    sorts BCSignature .

    *** The signature is just given as a sequence of Qids. Maybe this
    *** should become something better, but pattern-matching works for
    *** now.
    ***
    --- BC H CONS NIL ELT LIST
    ---
    op ______ : Qid Qid Qid Constant Type Type -> BCSignature [ctor] .
    op noSignature : -> [BCSignature] .

    *** We'll declare this here because we'll need it in both
    *** BC-UNIFICATION and BC-INFERENCE.
    op bc-infer : StUnificandSet BCSignature Nat -> [UnificationPair?] .
endfm

fmod EXTRACT-SIGNATURE{XX :: BC} is
    protecting BC-SHARED .

    vars X : XX$Elt .
    vars L : XX$List .

    op $elt : -> XX$Elt [ctor] .

    op getSignature : -> BCSignature .
    eq getSignature = root(upTerm(bc(nil, $elt)))
                      root(upTerm(h($elt, $elt)))
                      root(upTerm(cons($elt, nil)))
                      upTerm((nil).XX$List)
                      getType(upTerm($elt))
                      getType(upTerm((nil).XX$List)) .
endfm

*** This is the main module for this project. The bc-unify function
*** implements BC unification.
***
fmod BC-UNIFICATION{ALG :: UNIFICATION-ALGORITHM} is
    protecting APPLY .
    protecting BC-SHARED .
    protecting INFERENCE .
    protecting META-LEVEL .
    protecting STANDARD-FORM .
    protecting UNIFICAND-SET .
    protecting UNIFICATION-PAIR-UTILS .

    extending META-TERM .

    sorts UnificandSetPartition .

    op _;_ : UnificandSet UnificandSet -> UnificandSetPartition [ctor] .

    vars VIEW : View .
    vars MOD : Module .
    vars MODEX : ModuleExpression .
    vars N N' SKIP ESKIP LSKIP : Nat .
    vars SIG : BCSignature .
    vars PROB : UnificationProblem .
    vars EQ S1 S2 : UnificandSet .
    vars PAIR : UnificationPair? .
    vars PAIR? : [UnificationPair?] .
    vars SUB : Substitution .

    vars BC H CONS : Qid .
    vars NIL : Constant .
    vars ELT LIST : Type .

    vars U : Variable .
    vars T : Term .

    *** This is the entry-point for BC unification.
    op bc-unify : UnificationProblem View Nat Nat -> UnificationPair? .
    ceq bc-unify(PROB, VIEW, N, SKIP) =
        bc-unify-balance(bc-infer(EQ, SIG, N), MOD, 0, SKIP)
        if SIG := metaGetSignature(VIEW)
        /\ MOD := wrapInTheory(getTo(VIEW))
        /\ {EQ, N'} := decompose(MOD, problemToSet(PROB), N) .

    op bc-unify : [UnificationPair?] Module Nat Nat -> UnificationPair? .
    eq bc-unify(PAIR?, MOD, LSKIP, ESKIP) =
        element-phase(list-phase(PAIR?, LSKIP), MOD, ESKIP) .

    op bc-unify-balance : [UnificationPair?] Module Nat Nat
                          -> UnificationPair? .
    eq bc-unify-balance(PAIR?, MOD, LSKIP, 0) =
        bc-unify(PAIR?, MOD, LSKIP, 0) .
    ceq bc-unify-balance(PAIR?, MOD, LSKIP, s ESKIP) = PAIR
        if PAIR := bc-unify(PAIR?, MOD, LSKIP, s ESKIP)
        /\ PAIR :: UnificationPair .
    eq bc-unify-balance(PAIR?, MOD, LSKIP, s ESKIP) =
        bc-unify-balance(PAIR?, MOD, s LSKIP, ESKIP) [owise] .

    op metaGetSignature : View -> [BCSignature] .
    eq metaGetSignature(VIEW) = downTerm(getTerm(
        metaReduce(fmod 'META-EXTRACT is
                       protecting 'EXTRACT-SIGNATURE{getName(VIEW)} .
                       sorts none .
                       none none none none
                   endfm, 'getSignature.BCSignature)),
        noSignature) .

    op wrapInTheory : ModuleExpression -> Module .
    eq wrapInTheory(MODEX) = (th 'TEMP is
                                  including MODEX .
                                  sorts none .
                                  none none none none none
                              endth) .

    op list-phase : [UnificationPair?] Nat -> [UnificationPair?] [memo] .
    eq list-phase(PAIR?, LSKIP) =
        downTerm(inferenceRules(upModule('BC-INFERENCE, false),
                                upTerm(PAIR?),
                                upTerm((noUnifier).UnificationPair?),
                                LSKIP),
                    (noUnifier).UnificationPair?) .

    op element-phase : [UnificationPair?] Module Nat -> UnificationPair? .
    eq element-phase(PAIR, MOD, SKIP) = PAIR .
    ceq element-phase(bc-infer(EQ, SIG, N), MOD, SKIP) =
        if S2 == empty
            then if SKIP == 0
                then {buildsub(S1), N}
                else noUnifier
            fi
            else build-solution(unify-alg(MOD, setToProblem(S2), N, SKIP), S1)
        fi
        if S1 ; S2 := getPartition(EQ, SIG) .

    op build-solution : UnificationPair? UnificandSet -> UnificationPair? .
    eq build-solution(PAIR, EQ) =
        if PAIR :: UnificationPair
            then {filterSubst((getSubstitution(PAIR))[buildsub(EQ)] ;
                              getSubstitution(PAIR)),
                  getNat(PAIR)}
            else noUnifier
        fi .

    *** Partition a set of equations into list and element equations.
    op getPartition : UnificandSet BCSignature -> UnificandSetPartition .
    eq getPartition(EQ, SIG) = $getPartition(EQ, empty ; empty, SIG) .

    op $getPartition : UnificandSet UnificandSetPartition BCSignature
                      -> UnificandSetPartition .
    ceq $getPartition(U =? T & EQ, S1 ; S2, BC H CONS NIL ELT LIST) =
        $getPartition(EQ, (S1 & U =? T) ; S2, BC H CONS NIL ELT LIST)
        if getType(U) = LIST .
    ceq $getPartition(U =? T & EQ, S1 ; S2, BC H CONS NIL ELT LIST) =
        $getPartition(EQ, S1 ; (S2 & U =? T), BC H CONS NIL ELT LIST)
        if getType(U) = ELT .
    eq $getPartition(U =? T & EQ, S1 ; S2, BC H CONS NIL ELT LIST) =
        $getPartition(EQ, S1 ; S2, BC H CONS NIL ELT LIST)
        [owise] .
    eq $getPartition(empty, S1 ; S2, BC H CONS NIL ELT LIST) = S1 ; S2 .

    *** Filter new variable assignments out of a substitution.
    op filterSubst : Substitution -> Substitution .
    eq filterSubst(U <- T ; SUB) =
        (if isNewVar(U) then none else U <- T fi) ; filterSubst(SUB) .
    eq filterSubst(none) = none .
endfm

view Variable from TRIV to META-TERM is
    sort Elt to Variable .
endv

fmod BC-EDGE is
    protecting META-TERM .
    protecting SIMPLE-SET{Variable}
        * (sort SimpleSet{Variable} to BCSimpleSet,
           sort NeSimpleSet{Variable} to NeBCSimpleSet) .

    sorts BCEdge .

    op bcE : Variable Variable -> BCEdge [ctor] .
    op consE : Variable Variable -> BCEdge [ctor] .

    vars U V W : Variable .
    vars E : BCEdge .

    op from : BCEdge Variable -> Bool .
    eq from(bcE(U, V), W) = U == W or V == W .
    eq from(consE(U, V), W) = U == W .

    op to : BCEdge Variable -> Bool .
    eq to(bcE(U, V), W) = U == W or V == W .
    eq to(consE(U, V), W) = V == W .

    op nodes : BCEdge -> NeBCSimpleSet .
    eq nodes(bcE(U, V)) = s(U, V) .
    eq nodes(consE(U, V)) = s(U, V) .

    op _>bc_in_ : Variable Variable BCEdge -> Bool .
    eq U >bc V in bcE(U, V) = true .
    eq U >bc V in E = false [owise] .

    op isBc : BCEdge -> Bool .
    eq isBc(bcE(U, V)) = true .
    eq isBc(E) = false [owise] .

    op isCons : BCEdge -> Bool .
    eq isCons(consE(U, V)) = true .
    eq isCons(E) = false [owise] .
endfm

view BCEdge from EDGE to BC-EDGE is
    sort Node to Variable .
    sort Edge to BCEdge .
    sort NodeSet to BCSimpleSet .
    sort NeNodeSet to NeBCSimpleSet .
endv

fmod BC-GRAPH is
    protecting EXT-BOOL .
    protecting META-GRAPH{BCEdge}
        * (sort Graph{BCEdge} to BCGraph,
           sort NeGraph{BCEdge} to NeBCGraph,
           sort Path{BCEdge} to BCPath,
           sort NePath{BCEdge} to NeBCPath,
           sort Path?{BCEdge} to BCPath?,
           sort NePath?{BCEdge} to NeBCPath?) .

    vars E : BCEdge .
    vars G : BCGraph .
    vars P : BCPath .
    vars NeP : NeBCPath .
    vars S : BCSimpleSet .
    vars U V : Variable .

    *** Check that a path is a cycle of (directed) >bc edges, starting
    *** from the specified node.
    op isBcPath : Variable BCPath -> Bool .
    ceq isBcPath(U, E NeP) = U >bc V in E and-then isBcPath(V, NeP)
        if s(U, V) := nodes(E) .
    ceq isBcPath(U, E) = U >bc V in E
        if s(U, V) := nodes(E) .
    eq isBcPath(U, emptypath) = false .

    *** Check that a path contains at least one >cons edge.
    op isLPath : BCPath -> Bool .
    eq isLPath(E P) = isCons(E) or-else (isBc(E) and-then isLPath(P)) .
    eq isLPath(emptypath) = false .

    op hasBcCycle : Variable BCGraph -> Bool .
    eq hasBcCycle(U, G) = findNePath(U, U, G, ['BC-GRAPH],
                                     'isBcPath[upTerm(U), []], 0)
                          :: BCPath .

    op hasLCycle : BCGraph -> Bool .
    eq hasLCycle(G) = hasCycle(G, ['BC-GRAPH], 'isLPath[[]]) .
endfm

*** These are the inference rules used by BC-UNIFICATION, along with
*** ancillary data structures.
***
mod BC-INFERENCE is
    protecting BC-GRAPH .
    protecting BC-SHARED .
    protecting UNIFICAND-SET .

    vars N : Nat .
    vars EQ : UnificandSet .
    vars SIG : BCSignature .

    vars T T1 T2 : Term .
    vars U V W X Y Z : Variable .
    vars U' U'' V' X' X'' : Variable .
    vars BC H CONS : Qid .
    vars NIL : Constant .
    vars ELT LIST : Type .
    vars S : QidSet .

    *** This helper function is defined over our more usable unificand
    *** sets.
    op bc-infer : StUnificandSet BCSignature Nat -> UnificationPair? .

    rl [size-failure] :
        bc-infer(U =? CONS[V, W] & U =? NIL & EQ,
                 BC H CONS NIL ELT LIST, N)
        => noUnifier
        [metadata "prec 0 det"] .

    crl [cycle-failure] :
        bc-infer(EQ, BC H CONS NIL ELT LIST, N)
        => noUnifier
        if hasLCycle(buildGraph(EQ, BC H CONS NIL ELT LIST))
        [metadata "prec 0 det"] .

    rl [rep-elim] :
        bc-infer(U =? T & U =? T & EQ, BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? T & EQ, BC H CONS NIL ELT LIST, N)
        [metadata "prec 1 det"] .

    rl [triv-elim] :
        bc-infer(U =? U & EQ, BC H CONS NIL ELT LIST, N)
        => bc-infer(EQ, BC H CONS NIL ELT LIST, N)
        [metadata "prec 1 det"] .

    crl [var-elim] :
        bc-infer(U =? V & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? V & replace(U, V, EQ),
                    BC H CONS NIL ELT LIST, N)
        if U =/= V /\ occurs(U, EQ)
        [metadata "prec 2 det"] .

    rl [cancel-cons] :
        bc-infer(U =? CONS[V, W] & U =? CONS[X, Y] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? CONS[V, W] & X =? V & Y =? W & EQ,
                    BC H CONS NIL ELT LIST, N)
        [metadata "prec 3 det"] .

    rl [nil-soln-1] :
        bc-infer(U =? BC[V, W] & U =? NIL & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? NIL & V =? NIL & EQ,
                    BC H CONS NIL ELT LIST, N)
        [metadata "prec 4 det"] .

    rl [nil-soln-2] :
        bc-infer(U =? BC[V, W] & V =? NIL & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? NIL & V =? NIL & EQ,
                    BC H CONS NIL ELT LIST, N)
        [metadata "prec 4 det"] .

    crl [nil-soln-3] :
        bc-infer(U =? BC[V, W] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? NIL & V =? NIL & EQ,
                    BC H CONS NIL ELT LIST, N)
        if hasBcCycle(U, buildGraph(U =? BC[V, W] & EQ,
                                    BC H CONS NIL ELT LIST))
        [metadata "prec 4 det"] .

    rl [semi-cancel-bc] :
        bc-infer(U =? BC[V, W] & U =? BC[X, W] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? BC[V, W] & X =? V & EQ,
                    BC H CONS NIL ELT LIST, N)
        [metadata "prec 5 det"] .

    crl [push-below] :
        bc-infer(U =? BC[V, W] & U =? BC[X, Y] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? CONS[U', U''] & V =? CONS[V', Z] &
                    X =? CONS[X', Z] & U'' =? BC[Z, U'] &
                    U' =? H[V', W] & U' =? H[X', Y] & EQ,
                    BC H CONS NIL ELT LIST, N + 5)
        if U in nonnil(U =? BC[V, W] & U =? BC[X, Y] & EQ,
                       BC H CONS NIL ELT LIST)
        /\ U' := newVar*(N + 1, ELT) /\ U'' := newVar*(N + 2, LIST)
        /\ V' := newVar*(N + 3, ELT) /\ Z   := newVar*(N + 4, LIST)
        /\ X' := newVar*(N + 5, ELT)
        [metadata "prec 6 det"] .

    crl [splitting] :
        bc-infer(U =? CONS[V, W] & U =? BC[X, Y] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? CONS[V, W] & X =? CONS[X', X''] &
                    V =? H[X', Y] & W =? BC[X'', V] & EQ,
                    BC H CONS NIL ELT LIST, N + 2)
        if X' := newVar*(N + 1, ELT) /\ X'' := newVar*(N + 2, LIST)
        [metadata "prec 7 det"] .

    rl [nil-soln-nondet] :
        bc-infer(U =? BC[V, W] & U =? BC[X, Y] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? NIL & V =? NIL & X =? NIL & EQ,
                    BC H CONS NIL ELT LIST, N)
        [metadata "prec 8 nondet"] .

    crl [push-below-nondet] :
        bc-infer(U =? BC[V, W] & U =? BC[X, Y] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? CONS[U', U''] & V =? CONS[V', Z] &
                    X =? CONS[X', Z] & U'' =? BC[Z, U'] &
                    U' =? H[V', W] & U' =? H[X', Y] & EQ,
                    BC H CONS NIL ELT LIST, N + 5)
        if U' := newVar*(N + 1, ELT) /\ U'' := newVar*(N + 2, LIST)
        /\ V' := newVar*(N + 3, ELT) /\ Z   := newVar*(N + 4, LIST)
        /\ X' := newVar*(N + 5, ELT)
        [metadata "prec 8 nondet"] .

    rl [cancel-nondet] :
        bc-infer(U =? BC[V, W] & U =? BC[X, Y] & EQ,
                 BC H CONS NIL ELT LIST, N)
        => bc-infer(U =? BC[V, W] & X =? V & Y =? W & EQ,
                    BC H CONS NIL ELT LIST, N)
        [metadata "prec 8 nondet"] .


    *** Convert a set of unificands into a dependency graph.
    op buildGraph : UnificandSet BCSignature -> BCGraph .
    eq buildGraph(U =? CONS[V, W] & EQ, BC H CONS NIL ELT LIST) =
        consE(U, W) || buildGraph(EQ, BC H CONS NIL ELT LIST) .
    eq buildGraph(U =? BC[V, W] & EQ, BC H CONS NIL ELT LIST) =
        bcE(U, V) || buildGraph(EQ, BC H CONS NIL ELT LIST) .
    eq buildGraph(U =? T & EQ, BC H CONS NIL ELT LIST) =
        buildGraph(EQ, BC H CONS NIL ELT LIST) [owise] .
    eq buildGraph(empty, SIG) = emptygraph .


    *** Compute the set of variables that must NOT be assigned nil in
    *** a solution.
    op nonnil : UnificandSet BCSignature -> QidSet .
    eq nonnil(EQ, SIG) = $nonnil(EQ, none, SIG) .

    op $nonnil : UnificandSet QidSet BCSignature -> QidSet .
    eq $nonnil(U =? CONS[V, W] & EQ, S, BC H CONS NIL ELT LIST) =
        $nonnil(EQ, (U ; S), BC H CONS NIL ELT LIST) .
    ceq $nonnil(U =? BC[V, W] & EQ, S, BC H CONS NIL ELT LIST) =
        $nonnil(EQ, (U ; V ; S), BC H CONS NIL ELT LIST)
        if (U in S) or (V in S) .
    ceq $nonnil(U =? V & EQ, S, BC H CONS NIL ELT LIST) =
        $nonnil(EQ, (U ; V ; S), BC H CONS NIL ELT LIST)
        if (U in S) or (V in S) .
    eq $nonnil(EQ, S, SIG) = S [owise] .
endm

