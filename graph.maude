**********************************************************************
*** graph.maude
***
*** Copyright (c) 2013, Christopher Bouchard
*** All rights reserved.
***
*** Redistribution and use in source and binary forms, with or without
*** modification, are permitted provided that the following conditions
*** are met:
***
***  * Redistributions of source code must retain the above copyright
***    notice, this list of conditions and the following disclaimer.
***
***  * Redistributions in binary form must reproduce the above copyright
***    notice, this list of conditions and the following disclaimer in
***    the documentation and/or other materials provided with the
***    distribution.
***
*** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*** FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*** COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*** BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*** CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*** ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*** POSSIBILITY OF SUCH DAMAGE.
***
**********************************************************************

load apply .
load tools .

fth EDGE is
    protecting BOOL .

    sorts Node Edge NodeSet NeNodeSet .
    subsorts Node < NeNodeSet < NodeSet .

    op emptyset : -> NodeSet [ctor] .
    op s : NodeSet NodeSet -> NodeSet
        [ctor assoc comm id: emptyset] .
    op s : NeNodeSet NodeSet -> NeNodeSet
        [ctor ditto] .

    op from : Edge Node -> Bool .
    op to : Edge Node -> Bool .
    op nodes : Edge -> NeNodeSet .
endfth

fmod GRAPH{E :: EDGE} is
    protecting NAT .

    *** Define the Graph sort and its related subsorts and constructors.
    sorts Graph{E} NeGraph{E} .
    subsorts E$Edge < NeGraph{E} < Graph{E} .

    op emptygraph : -> Graph{E} [ctor] .

    op _||_ : Graph{E} Graph{E} -> Graph{E}
        [assoc comm ctor id: emptygraph prec 80 format (d r os d)] .
    op _||_ : NeGraph{E} Graph{E} -> NeGraph{E}
        [ctor ditto] .


    *** Define the Path sort and its related subsorts and constructors.
    *** We also provide a maybe type Path? to indicate failure to
    *** compute a path.
    sorts Path{E} NePath{E} Path?{E} .
    subsorts E$Edge < NePath{E} < Path{E} < Path?{E} .

    op noPath : -> Path?{E} [ctor] .

    --- We only define the [Path{E}] kind for now. We'll use membership
    --- axioms below to define the sort.
    op emptypath : -> Path{E} [ctor] .
    op __ : [Path{E}] [Path{E}] -> [Path{E}]
        [ctor assoc id: emptypath] .


    *** Define lists of graphs, which is mainly intended as an internal
    *** data structure. We use these to implement a tail-recursive,
    *** backtracking search for paths.
    sorts GraphList{E} .
    subsorts Graph{E} < GraphList{E} .

    op nil : -> GraphList{E} [ctor] .
    op _;_ : GraphList{E} GraphList{E} -> GraphList{E}
        [ctor assoc id: nil prec 82] .


    vars E E' E1 E2 : E$Edge .
    vars G G' G'' : Graph{E} .
    vars N1 N2 N3 : E$Node .
    vars N NS ND NC : E$Node .
    vars P P1 P1' P2 P2' : Path{E} .
    vars P? : Path?{E} .
    vars NEP : NePath{E} .
    vars GL : GraphList{E} .
    vars SKIP : Nat .
    vars S S1 S2 : E$NodeSet .


    *** The edges in a path have to match up end to end.
    cmb NEP E2 : NePath{E}
        if P E1 := NEP
        /\ s(N1, N2, S1) := nodes(E1) /\ s(N2, N3, S2) := nodes(E2)
        /\ to(E1, N2) /\ from(E2, N2) .


    --- Graphs are idempotent, but we can't mix the assoc, comm, and
    --- idem attributes.
    eq E || E = E .


    op graphnodes : Graph{E} -> E$NodeSet .
    op graphnodes : NeGraph{E} -> E$NeNodeSet .
    eq graphnodes(emptygraph) = emptyset .
    eq graphnodes(E || G) = s(nodes(E), graphnodes(G)) .


    op hasCycle : Graph{E} -> Bool .
    ceq hasCycle(G) = true
        if s(N, S) := graphnodes(G)
        /\ findNePath(N, N, G, 0) :: NePath{E} .
    eq hasCycle(G) = false [owise] .


    op getSubgraphFrom : E$NodeSet Graph{E} -> Graph{E} .
    eq getSubgraphFrom(s(N, S), E || G) =
        if from(E, N)
            then E
            else emptygraph
        fi || getSubgraphFrom(s(N, S), G) .
    eq getSubgraphFrom(N, emptygraph) = emptygraph .

    op getSubgraphTo : E$NodeSet Graph{E} -> Graph{E} .
    eq getSubgraphTo(s(N, S), E || G) =
        if to(E, N)
            then E
            else emptygraph
        fi || getSubgraphTo(s(N, S), G) .
    eq getSubgraphTo(N, emptygraph) = emptygraph .


    op findPath : E$Node E$Node Graph{E} Nat -> Path?{E} .
    eq findPath(N, N, G, SKIP) =
        if SKIP == 0
            then emptypath
            else findNePath(N, N, G, sd(SKIP, 1))
        fi .
    eq findPath(NS, ND, G, SKIP) = findNePath(NS, ND, G, SKIP)
        [owise] .

    op findNePath : E$Node E$Node Graph{E} Nat -> Path?{E} .
    eq findNePath(NS, ND, G, SKIP) =
        $findNePath(NS, NS, ND, emptypath, nil, G, SKIP) .

    --- We keep the set of applicable nodes for each step in the path.
    --- Could this be replaced with a skip counter? We'd need some way
    --- to order the edges internally.
    op $findNePath : E$Node E$Node E$Node Path{E} GraphList{E} Graph{E}
                     Nat -> Path?{E} .
    ceq $findNePath(NS, NC, ND, P, GL, G, SKIP) =
        $findNePath(NS, N, ND, P E, (GL ; G'), G'', SKIP)
        if NC =/= ND or P == emptypath
        /\ E || G' := getSubgraphFrom(NC, G)
        /\ s(NC, N, S) := nodes(E) /\ from(E, NC) /\ to(E, N)
        /\ E || G'' := G
        [print "NS=" NS " NC=" NC " ND=" ND " Edge=" E " Subgraph=" G'] .
    ceq $findNePath(NS, NC, ND, P, GL, G, SKIP) =
        $revertNePath(NS, NC, ND, P, GL, G, SKIP)
        if NC =/= ND or P == emptypath
        /\ emptygraph := getSubgraphFrom(NC, G)
        [print "NS=" NS " NC=" NC " ND=" ND] .
    ceq $findNePath(NS, ND, ND, P, GL, G, SKIP) =
        if SKIP == 0
            then P
            else $revertNePath(NS, ND, ND, P, GL, G, sd(SKIP, 1))
        fi
        if P =/= emptypath
        [print "NS=" NS " NC=" ND " ND=" ND " -- Solution found:"
        " SKIP=" SKIP] .

    op $revertNePath : E$Node E$Node E$Node Path{E} GraphList{E}
                       Graph{E} Nat -> Path?{E} .
    ceq $revertNePath(NS, NC, ND, P E, (GL ; G' || E'), G, SKIP) =
        $findNePath(NS, N2, ND, P E', (GL ; G'), G'', SKIP)
        if s(N1, NC, S1) := nodes(E) /\ s(N1, N2, S2) := nodes(E')
        /\ from(E, N1) /\ from(E', N1) /\ to(E', N2)
        /\ E' || G'' := G || E
        [print "Revert: Trying other edges..."] .
    ceq $revertNePath(NS, NC, ND, P E, (GL ; emptygraph), G, SKIP) =
        $revertNePath(NS, N, ND, P, GL, G || E, SKIP)
        if s(N, NC, S) := nodes(E) /\ from(E, N)
        [print "Revert: Backtracking..."] .
    eq $revertNePath(NS, NC, ND, P, nil, G, SKIP) = noPath
        [print "Revert: Failing!"] .
endfm


fmod META-GRAPH{E :: EDGE} is
    protecting APPLY .
    protecting GRAPH{E} .
    protecting META-LEVEL .
    protecting NAT-UTILS .

    extending META-TERM .

    vars N N1 N2 : E$Node .
    vars S : E$NodeSet .
    vars G : Graph{E} .
    vars CTX : Context .
    vars SKIP BIGSKIP : Nat .
    vars PATH : Path{E} .
    vars PATH? : Path?{E} .
    vars RESULT : ResultPair .
    vars MOD : Module .
    vars EOK : Bool .
    vars T : Term .


    op hasCycle : Graph{E} Module Context -> Bool .
    ceq hasCycle(G, MOD, CTX) = true
        if s(N, S) := graphnodes(G)
        /\ findNePath(N, N, G, MOD, CTX, 0) :: NePath{E} .
    eq hasCycle(G, MOD, CTX) = false [owise] .


    op findPath : E$Node E$Node Graph{E} Module Context Nat
                  -> Path?{E} .
    eq findPath(N1, N2, G, MOD, CTX, BIGSKIP) =
        $findPath(N1, N2, G, MOD, CTX, 0, BIGSKIP, true) .

    op findNePath : E$Node E$Node Graph{E} Module Context Nat
                    -> Path?{E} .
    eq findNePath(N1, N2, G, MOD, CTX, BIGSKIP) =
        $findPath(N1, N2, G, MOD, CTX, 0, BIGSKIP, false) .


    op $findPath : E$Node E$Node Graph{E} Module Context Nat Nat Bool
                   -> Path?{E} .
    ceq $findPath(N1, N2, G, MOD, CTX, SKIP, BIGSKIP, EOK) =
        if PATH? :: Path{E}
            then if $checkPath(MOD, CTX, PATH?)
                then if BIGSKIP == 0
                    then PATH?
                    else $findPath(N1, N2, G, MOD, CTX, SKIP + 1,
                                   dec(BIGSKIP), EOK)
                fi
                else $findPath(N1, N2, G, MOD, CTX, SKIP + 1, BIGSKIP,
                               EOK)
            fi
            else noPath
        fi
        if PATH? :=
            if EOK
                then findPath(N1, N2, G, SKIP)
                else findNePath(N1, N2, G, SKIP)
            fi .

    op $checkPath : Module Context Path{E} -> Bool .
    ceq $checkPath(MOD, CTX, PATH) =
        downTerm(getTerm(metaRewrite(MOD, CTX[upTerm(PATH)],
                                     unbounded)),
                 false)
        if T := CTX[upTerm(PATH)]
        [print "Checking T=" T] .
endfm


*** It's useful to have graphs of Qids, so we pre-define them.

fmod SIMPLE-SET{X :: TRIV} is
    sorts SimpleSet{X} NeSimpleSet{X} .
    subsorts X$Elt < NeSimpleSet{X} < SimpleSet{X} .

    op emptyset : -> SimpleSet{X} [ctor] .
    op s : SimpleSet{X} SimpleSet{X} -> SimpleSet{X}
        [ctor assoc comm id: emptyset] .
    op s : NeSimpleSet{X} SimpleSet{X} -> NeSimpleSet{X}
        [ctor ditto] .
endfm

fmod QID-EDGE is
    --- Use this because META-LEVEL does.
    protecting QID-SET * (op empty to none,
                          op _,_ to _;_ [prec 43]) .

    sorts QidEdge Qid? .

    subsorts Qid < Qid? .

    op unlabelled : -> Qid? .

    op qe : Qid Qid -> QidEdge [ctor] .
    op qe : Qid Qid Qid -> QidEdge [ctor] .

    vars Q Q1 Q2 Q3 Q4 : Qid .
    vars E : QidEdge .

    op from : QidEdge Qid -> Bool .
    eq from(qe(Q1, Q2), Q4) = Q1 == Q4 .
    eq from(qe(Q1, Q2, Q3), Q4) = Q1 == Q4 .

    op to : QidEdge Qid -> Bool .
    eq to(qe(Q1, Q2), Q4) = Q2 == Q4 .
    eq to(qe(Q1, Q2, Q3), Q4) = Q2 == Q4 .

    op label : QidEdge -> Qid? .
    eq label(qe(Q1, Q2)) = unlabelled .
    eq label(qe(Q1, Q2, Q3)) = Q3 .

    op nodes : QidEdge -> NeQidSet .
    eq nodes(qe(Q1, Q2)) = Q1 ; Q2 .
    eq nodes(qe(Q1, Q2, Q3)) = Q1 ; Q2 .
endfm

view QidEdge from EDGE to QID-EDGE is
    sort Node to Qid .
    sort Edge to QidEdge .
    sort NodeSet to QidSet .
    sort NeNodeSet to NeQidSet .

    op emptyset to none .
    op s to _;_ .
endv

fmod QID-GRAPH is
    protecting GRAPH{QidEdge}
        * (sort Graph{QidEdge} to QidGraph,
           sort NeGraph{QidEdge} to NeQidGraph,
           sort Path{QidEdge} to QidPath,
           sort NePath{QidEdge} to NeQidPath,
           sort Path?{QidEdge} to QidPath?,
           sort NePath?{QidEdge} to NeQidPath?) .
endfm

